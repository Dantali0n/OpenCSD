image: $CI_REGISTRY/vu/qemu-csd/qemu-csd:$CI_COMMIT_SHORT_SHA
stages:
  - image
  - static-analysis
  - build
  - test
  - coverage
  - memory
variables:
  GIT_SUBMODULE_STRATEGY: normal
cache:
  paths:
#    - "dependencies/*"
    - "build/qemu-csd/arch-qemucsd.qcow2"
    - "build/qemu-csd/bin/*"
    - "build/qemu-csd/lib/*"
    - "build/qemu-csd/include/*"
# before_script:
#  - git submodule update --init
build-image:
  stage: image
  tags:
    - dind
  image: docker
  services:
    - name: docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd scripts # Minimize build context migrated to docker container
    - docker build -t $CI_REGISTRY/vu/qemu-csd/qemu-csd:$CI_COMMIT_SHORT_SHA -f Dockerfile .
    - docker push $CI_REGISTRY/vu/qemu-csd/qemu-csd:$CI_COMMIT_SHORT_SHA
shellcheck-linting:
  stage: static-analysis
  tags:
    - linux
  before_script:
    - pacman -Syy
    - sudo pacman -Sy --noconfirm shellcheck
  script:
    - shellcheck scripts/*.sh
    - shellcheck scripts/activate
build-documentation:
  stage: build
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_DOCUMENTATION=on ..
    - make latex-pdf
  artifacts:
    paths:
      - "*/*.pdf"
build-source-documentation:
  stage: build
  script:
    - cd $CI_PROJECT_DIR
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_DOCUMENTATION=on ..
    - make doxygen
  artifacts:
    paths:
      - "docs/*"
build-binaries:
  stage: build
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR || exit
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_PLAYGROUND=off -DENABLE_DOCUMENTATION=off ..
    - make
  artifacts:
    paths:
      - "build/qemu-csd/*.so"
      - "build/qemu-csd/qemucsd"
# build-binaries-windows:
#  stage: build
#  tags:
#    - windows
#  script:
#    - mkdir -p build
#    - cd build || exit
#    - cmake -G "Visual Studio 16 2019" -ENABLE_PLAYGROUND=on -DENABLE_DOXYGEN=off ..
#    - ls -lah
#    - cmake --build . --target ALL_BUILD
#  artifacts:
#    paths:
#      - "build/qemu-csd/*.so"
#      - "build/qemu-csd/qemucsd"
build-playground:
  stage: build
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR || exit
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_PLAYGROUND=on -DENABLE_DOCUMENTATION=off ..
    - make playground
  artifacts:
    paths:
      - "build/playground/play-*"
test:
  stage: test
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR || exit
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_PLAYGROUND=off -DENABLE_DOCUMENTATION=off -DENABLE_TESTS=on ..
    - make check
#test-windows:
#  stage: test
#  tags:
#    - windows
#  script:
#    - cd $CI_PROJECT_DIR || exit
#    - mkdir -p build
#    - cd build || exit
#    - cmake -G "Visual Studio 16 2019" -DENABLE_PLAYGROUND=off -DENABLE_DOXYGEN=off -DENABLE_TESTS=on ..
#    - make check
coverage:
  stage: coverage
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR || exit
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_CODECOV=on ..
    - make clean
    - make check
    - make qemu-csd_coverage
  artifacts:
    paths:
      - build/coverage/*
    reports:
      cobertura: build/coverage.xml
memory-valgrind:
  stage: memory
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR || exit
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_PLAYGROUND=off -DENABLE_DOCUMENTATION=off -DENABLE_TESTS=on ..
    - make tests
    - 'for test in $(ls tests/test*); do valgrind --leak-check=full "$test"; done'
memory-sanitizer:
  stage: memory
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR || exit
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_LEAK_TESTS=on ..
    - make check
