image: archlinux:base-devel
before_script:
#  - echo "Server = https://mirrors.daan.vodka/archlinux/$repo/os/$arch" | sudo tee /etc/pacman.d/mirrormulti
  - echo "[multilib]" | sudo tee -a /etc/pacman.conf
  - echo "Include = /etc/pacman.d/mirrorlist" | sudo tee -a /etc/pacman.conf
  - pacman -Syy
  - sudo pacman -Sy --noconfirm base-devel cmake clang gcc llvm yasm ninja cunit pixman python-pip git libaio numactl lib32-glibc gcovr
  - sudo pacman -Sy --noconfirm doxygen texlive-bin texlive-science texlive-publishers texlive-latexextra texlive-humanities
  - pip install meson
  - git clone https://aur.archlinux.org/lcov.git
  - cd lcov
  - makepkg -si
stages:
  - build
  - test
  - coverage
  - memory
variables:
  GIT_SUBMODULE_STRATEGY: normal
cache:
  paths:
#    - "dependencies/*"
    - "build/qemu-csd/arch-qemucsd.qcow2"
    - "build/qemu-csd/bin/*"
    - "build/qemu-csd/lib/*"
    - "build/qemu-csd/include/*"
# before_script:
#  - git submodule update --init
build-documentation:
  stage: build
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_DOCUMENTATION=on ..
    - make latex-pdf
  artifacts:
    paths:
      - "*/*.pdf"
build-source-documentation:
  stage: build
  script:
    - cd $CI_PROJECT_DIR
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_DOCUMENTATION=on ..
    - make doxygen
  artifacts:
    paths:
      - "docs/*"
build-binaries:
  stage: build
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR || exit
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_PLAYGROUND=off -DENABLE_DOCUMENTATION=off ..
    - make
  artifacts:
    paths:
      - "build/qemu-csd/*.so"
      - "build/qemu-csd/qemucsd"
# build-binaries-windows:
#  stage: build
#  tags:
#    - windows
#  script:
#    - mkdir -p build
#    - cd build || exit
#    - cmake -G "Visual Studio 16 2019" -ENABLE_PLAYGROUND=on -DENABLE_DOXYGEN=off ..
#    - ls -lah
#    - cmake --build . --target ALL_BUILD
#  artifacts:
#    paths:
#      - "build/qemu-csd/*.so"
#      - "build/qemu-csd/qemucsd"
build-playground:
  stage: build
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR || exit
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_PLAYGROUND=on -DENABLE_DOCUMENTATION=off ..
    - make playground
  artifacts:
    paths:
      - "build/playground/play-*"
test:
  stage: test
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR || exit
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_PLAYGROUND=off -DENABLE_DOCUMENTATION=off -DENABLE_TESTS=on ..
    - make check
#test-windows:
#  stage: test
#  tags:
#    - windows
#  script:
#    - cd $CI_PROJECT_DIR || exit
#    - mkdir -p build
#    - cd build || exit
#    - cmake -G "Visual Studio 16 2019" -DENABLE_PLAYGROUND=off -DENABLE_DOXYGEN=off -DENABLE_TESTS=on ..
#    - make check
coverage:
  stage: coverage
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR || exit
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_CODECOV=on ..
    - make clean
    - make check
    - make qemu-csd_coverage
  artifacts:
    paths:
      - build/qemucsd_arguments/*
    reports:
      cobertura: build/coverage.xml
memory-valgrind:
  stage: memory
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR || exit
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_PLAYGROUND=off -DENABLE_DOCUMENTATION=off -DENABLE_TESTS=on ..
    - make tests
    - valgrind --leak-check=full tests/testcpp17
    - valgrind --leak-check=full tests/testarguments
memory-sanitizer:
  stage: memory
  tags:
    - linux
  script:
    - cd $CI_PROJECT_DIR || exit
    - mkdir -p build
    - cd build || exit
    - cmake -DENABLE_LEAK_TESTS=on ..
    - make check
